# source: https://eu1.prisma.sh/shengh/kinetikos/dev
# timestamp: Mon Aug 06 2018 15:45:31 GMT+0100 (Western European Summer Time)

type AggregateAlternatives {
  count: Int!
}

type AggregateAlternativeText {
  count: Int!
}

type AggregateAnswer {
  count: Int!
}

type AggregateLanguage {
  count: Int!
}

type AggregateList {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateQuestionnaire {
  count: Int!
}

type AggregateQuestionnairename {
  count: Int!
}

type AggregateQuestionText {
  count: Int!
}

type AggregateQuestionType {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Alternatives implements Node {
  id: ID!
  description: String!
  value: Float!
  order: Int!
  listID(where: ListWhereInput): List
  alternativeText(where: AlternativeTextWhereInput, orderBy: AlternativeTextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AlternativeText!]
  question(where: QuestionWhereInput): Question
}

"""A connection to a list of items."""
type AlternativesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AlternativesEdge]!
  aggregate: AggregateAlternatives!
}

input AlternativesCreateInput {
  description: String!
  value: Float!
  order: Int!
  listID: ListCreateOneInput
  alternativeText: AlternativeTextCreateManyWithoutAlternativeIDInput
  question: QuestionCreateOneWithoutAlternativeInput
}

input AlternativesCreateManyWithoutQuestionInput {
  create: [AlternativesCreateWithoutQuestionInput!]
  connect: [AlternativesWhereUniqueInput!]
}

input AlternativesCreateOneInput {
  create: AlternativesCreateInput
  connect: AlternativesWhereUniqueInput
}

input AlternativesCreateOneWithoutAlternativeTextInput {
  create: AlternativesCreateWithoutAlternativeTextInput
  connect: AlternativesWhereUniqueInput
}

input AlternativesCreateWithoutAlternativeTextInput {
  description: String!
  value: Float!
  order: Int!
  listID: ListCreateOneInput
  question: QuestionCreateOneWithoutAlternativeInput
}

input AlternativesCreateWithoutQuestionInput {
  description: String!
  value: Float!
  order: Int!
  listID: ListCreateOneInput
  alternativeText: AlternativeTextCreateManyWithoutAlternativeIDInput
}

"""An edge in a connection."""
type AlternativesEdge {
  """The item at the end of the edge."""
  node: Alternatives!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AlternativesOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  value_ASC
  value_DESC
  order_ASC
  order_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AlternativesPreviousValues {
  id: ID!
  description: String!
  value: Float!
  order: Int!
}

type AlternativesSubscriptionPayload {
  mutation: MutationType!
  node: Alternatives
  updatedFields: [String!]
  previousValues: AlternativesPreviousValues
}

input AlternativesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AlternativesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AlternativesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AlternativesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AlternativesWhereInput
}

input AlternativesUpdateDataInput {
  description: String
  value: Float
  order: Int
  listID: ListUpdateOneInput
  alternativeText: AlternativeTextUpdateManyWithoutAlternativeIDInput
  question: QuestionUpdateOneWithoutAlternativeInput
}

input AlternativesUpdateInput {
  description: String
  value: Float
  order: Int
  listID: ListUpdateOneInput
  alternativeText: AlternativeTextUpdateManyWithoutAlternativeIDInput
  question: QuestionUpdateOneWithoutAlternativeInput
}

input AlternativesUpdateManyWithoutQuestionInput {
  create: [AlternativesCreateWithoutQuestionInput!]
  connect: [AlternativesWhereUniqueInput!]
  disconnect: [AlternativesWhereUniqueInput!]
  delete: [AlternativesWhereUniqueInput!]
  update: [AlternativesUpdateWithWhereUniqueWithoutQuestionInput!]
  upsert: [AlternativesUpsertWithWhereUniqueWithoutQuestionInput!]
}

input AlternativesUpdateOneInput {
  create: AlternativesCreateInput
  connect: AlternativesWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AlternativesUpdateDataInput
  upsert: AlternativesUpsertNestedInput
}

input AlternativesUpdateOneWithoutAlternativeTextInput {
  create: AlternativesCreateWithoutAlternativeTextInput
  connect: AlternativesWhereUniqueInput
  delete: Boolean
  update: AlternativesUpdateWithoutAlternativeTextDataInput
  upsert: AlternativesUpsertWithoutAlternativeTextInput
}

input AlternativesUpdateWithoutAlternativeTextDataInput {
  description: String
  value: Float
  order: Int
  listID: ListUpdateOneInput
  question: QuestionUpdateOneWithoutAlternativeInput
}

input AlternativesUpdateWithoutQuestionDataInput {
  description: String
  value: Float
  order: Int
  listID: ListUpdateOneInput
  alternativeText: AlternativeTextUpdateManyWithoutAlternativeIDInput
}

input AlternativesUpdateWithWhereUniqueWithoutQuestionInput {
  where: AlternativesWhereUniqueInput!
  data: AlternativesUpdateWithoutQuestionDataInput!
}

input AlternativesUpsertNestedInput {
  update: AlternativesUpdateDataInput!
  create: AlternativesCreateInput!
}

input AlternativesUpsertWithoutAlternativeTextInput {
  update: AlternativesUpdateWithoutAlternativeTextDataInput!
  create: AlternativesCreateWithoutAlternativeTextInput!
}

input AlternativesUpsertWithWhereUniqueWithoutQuestionInput {
  where: AlternativesWhereUniqueInput!
  update: AlternativesUpdateWithoutQuestionDataInput!
  create: AlternativesCreateWithoutQuestionInput!
}

input AlternativesWhereInput {
  """Logical AND on all given filters."""
  AND: [AlternativesWhereInput!]

  """Logical OR on all given filters."""
  OR: [AlternativesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AlternativesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  listID: ListWhereInput
  alternativeText_every: AlternativeTextWhereInput
  alternativeText_some: AlternativeTextWhereInput
  alternativeText_none: AlternativeTextWhereInput
  question: QuestionWhereInput
}

input AlternativesWhereUniqueInput {
  id: ID
}

type AlternativeText implements Node {
  id: ID!
  alternativeID(where: AlternativesWhereInput): Alternatives!
  language(where: LanguageWhereInput): Language!
  text: String!
}

"""A connection to a list of items."""
type AlternativeTextConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AlternativeTextEdge]!
  aggregate: AggregateAlternativeText!
}

input AlternativeTextCreateInput {
  text: String!
  alternativeID: AlternativesCreateOneWithoutAlternativeTextInput!
  language: LanguageCreateOneInput!
}

input AlternativeTextCreateManyWithoutAlternativeIDInput {
  create: [AlternativeTextCreateWithoutAlternativeIDInput!]
  connect: [AlternativeTextWhereUniqueInput!]
}

input AlternativeTextCreateWithoutAlternativeIDInput {
  text: String!
  language: LanguageCreateOneInput!
}

"""An edge in a connection."""
type AlternativeTextEdge {
  """The item at the end of the edge."""
  node: AlternativeText!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AlternativeTextOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AlternativeTextPreviousValues {
  id: ID!
  text: String!
}

type AlternativeTextSubscriptionPayload {
  mutation: MutationType!
  node: AlternativeText
  updatedFields: [String!]
  previousValues: AlternativeTextPreviousValues
}

input AlternativeTextSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AlternativeTextSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AlternativeTextSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AlternativeTextSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AlternativeTextWhereInput
}

input AlternativeTextUpdateInput {
  text: String
  alternativeID: AlternativesUpdateOneWithoutAlternativeTextInput
  language: LanguageUpdateOneInput
}

input AlternativeTextUpdateManyWithoutAlternativeIDInput {
  create: [AlternativeTextCreateWithoutAlternativeIDInput!]
  connect: [AlternativeTextWhereUniqueInput!]
  disconnect: [AlternativeTextWhereUniqueInput!]
  delete: [AlternativeTextWhereUniqueInput!]
  update: [AlternativeTextUpdateWithWhereUniqueWithoutAlternativeIDInput!]
  upsert: [AlternativeTextUpsertWithWhereUniqueWithoutAlternativeIDInput!]
}

input AlternativeTextUpdateWithoutAlternativeIDDataInput {
  text: String
  language: LanguageUpdateOneInput
}

input AlternativeTextUpdateWithWhereUniqueWithoutAlternativeIDInput {
  where: AlternativeTextWhereUniqueInput!
  data: AlternativeTextUpdateWithoutAlternativeIDDataInput!
}

input AlternativeTextUpsertWithWhereUniqueWithoutAlternativeIDInput {
  where: AlternativeTextWhereUniqueInput!
  update: AlternativeTextUpdateWithoutAlternativeIDDataInput!
  create: AlternativeTextCreateWithoutAlternativeIDInput!
}

input AlternativeTextWhereInput {
  """Logical AND on all given filters."""
  AND: [AlternativeTextWhereInput!]

  """Logical OR on all given filters."""
  OR: [AlternativeTextWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AlternativeTextWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  alternativeID: AlternativesWhereInput
  language: LanguageWhereInput
}

input AlternativeTextWhereUniqueInput {
  id: ID
}

type Answer implements Node {
  id: ID!
  question(where: QuestionWhereInput): Question!
  value: String!
  alternative(where: AlternativesWhereInput): Alternatives
}

"""A connection to a list of items."""
type AnswerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnswerEdge]!
  aggregate: AggregateAnswer!
}

input AnswerCreateInput {
  value: String!
  question: QuestionCreateOneInput!
  alternative: AlternativesCreateOneInput
}

input AnswerCreateManyInput {
  create: [AnswerCreateInput!]
  connect: [AnswerWhereUniqueInput!]
}

"""An edge in a connection."""
type AnswerEdge {
  """The item at the end of the edge."""
  node: Answer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnswerOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnswerPreviousValues {
  id: ID!
  value: String!
}

type AnswerSubscriptionPayload {
  mutation: MutationType!
  node: Answer
  updatedFields: [String!]
  previousValues: AnswerPreviousValues
}

input AnswerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnswerWhereInput
}

input AnswerUpdateDataInput {
  value: String
  question: QuestionUpdateOneInput
  alternative: AlternativesUpdateOneInput
}

input AnswerUpdateInput {
  value: String
  question: QuestionUpdateOneInput
  alternative: AlternativesUpdateOneInput
}

input AnswerUpdateManyInput {
  create: [AnswerCreateInput!]
  connect: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueNestedInput!]
  upsert: [AnswerUpsertWithWhereUniqueNestedInput!]
}

input AnswerUpdateWithWhereUniqueNestedInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateDataInput!
}

input AnswerUpsertWithWhereUniqueNestedInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateDataInput!
  create: AnswerCreateInput!
}

input AnswerWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  question: QuestionWhereInput
  alternative: AlternativesWhereInput
}

input AnswerWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Language implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type LanguageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LanguageEdge]!
  aggregate: AggregateLanguage!
}

input LanguageCreateInput {
  name: String!
}

input LanguageCreateOneInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
}

"""An edge in a connection."""
type LanguageEdge {
  """The item at the end of the edge."""
  node: Language!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LanguageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LanguagePreviousValues {
  id: ID!
  name: String!
}

type LanguageSubscriptionPayload {
  mutation: MutationType!
  node: Language
  updatedFields: [String!]
  previousValues: LanguagePreviousValues
}

input LanguageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LanguageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LanguageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LanguageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LanguageWhereInput
}

input LanguageUpdateDataInput {
  name: String
}

input LanguageUpdateInput {
  name: String
}

input LanguageUpdateOneInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
  delete: Boolean
  update: LanguageUpdateDataInput
  upsert: LanguageUpsertNestedInput
}

input LanguageUpsertNestedInput {
  update: LanguageUpdateDataInput!
  create: LanguageCreateInput!
}

input LanguageWhereInput {
  """Logical AND on all given filters."""
  AND: [LanguageWhereInput!]

  """Logical OR on all given filters."""
  OR: [LanguageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LanguageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input LanguageWhereUniqueInput {
  id: ID
  name: String
}

type List implements Node {
  id: ID!
  description: String!
}

"""A connection to a list of items."""
type ListConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ListEdge]!
  aggregate: AggregateList!
}

input ListCreateInput {
  description: String!
}

input ListCreateOneInput {
  create: ListCreateInput
  connect: ListWhereUniqueInput
}

"""An edge in a connection."""
type ListEdge {
  """The item at the end of the edge."""
  node: List!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ListOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ListPreviousValues {
  id: ID!
  description: String!
}

type ListSubscriptionPayload {
  mutation: MutationType!
  node: List
  updatedFields: [String!]
  previousValues: ListPreviousValues
}

input ListSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ListSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ListSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ListSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ListWhereInput
}

input ListUpdateDataInput {
  description: String
}

input ListUpdateInput {
  description: String
}

input ListUpdateOneInput {
  create: ListCreateInput
  connect: ListWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ListUpdateDataInput
  upsert: ListUpsertNestedInput
}

input ListUpsertNestedInput {
  update: ListUpdateDataInput!
  create: ListCreateInput!
}

input ListWhereInput {
  """Logical AND on all given filters."""
  AND: [ListWhereInput!]

  """Logical OR on all given filters."""
  OR: [ListWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ListWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input ListWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createQuestionnaire(data: QuestionnaireCreateInput!): Questionnaire!
  createQuestionnairename(data: QuestionnairenameCreateInput!): Questionnairename!
  createQuestionText(data: QuestionTextCreateInput!): QuestionText!
  createAlternativeText(data: AlternativeTextCreateInput!): AlternativeText!
  createList(data: ListCreateInput!): List!
  createQuestion(data: QuestionCreateInput!): Question!
  createAnswer(data: AnswerCreateInput!): Answer!
  createQuestionType(data: QuestionTypeCreateInput!): QuestionType!
  createLanguage(data: LanguageCreateInput!): Language!
  createAlternatives(data: AlternativesCreateInput!): Alternatives!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateQuestionnaire(data: QuestionnaireUpdateInput!, where: QuestionnaireWhereUniqueInput!): Questionnaire
  updateQuestionnairename(data: QuestionnairenameUpdateInput!, where: QuestionnairenameWhereUniqueInput!): Questionnairename
  updateQuestionText(data: QuestionTextUpdateInput!, where: QuestionTextWhereUniqueInput!): QuestionText
  updateAlternativeText(data: AlternativeTextUpdateInput!, where: AlternativeTextWhereUniqueInput!): AlternativeText
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateAnswer(data: AnswerUpdateInput!, where: AnswerWhereUniqueInput!): Answer
  updateQuestionType(data: QuestionTypeUpdateInput!, where: QuestionTypeWhereUniqueInput!): QuestionType
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language
  updateAlternatives(data: AlternativesUpdateInput!, where: AlternativesWhereUniqueInput!): Alternatives
  deleteUser(where: UserWhereUniqueInput!): User
  deleteQuestionnaire(where: QuestionnaireWhereUniqueInput!): Questionnaire
  deleteQuestionnairename(where: QuestionnairenameWhereUniqueInput!): Questionnairename
  deleteQuestionText(where: QuestionTextWhereUniqueInput!): QuestionText
  deleteAlternativeText(where: AlternativeTextWhereUniqueInput!): AlternativeText
  deleteList(where: ListWhereUniqueInput!): List
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteQuestionType(where: QuestionTypeWhereUniqueInput!): QuestionType
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteAlternatives(where: AlternativesWhereUniqueInput!): Alternatives
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertQuestionnaire(where: QuestionnaireWhereUniqueInput!, create: QuestionnaireCreateInput!, update: QuestionnaireUpdateInput!): Questionnaire!
  upsertQuestionnairename(where: QuestionnairenameWhereUniqueInput!, create: QuestionnairenameCreateInput!, update: QuestionnairenameUpdateInput!): Questionnairename!
  upsertQuestionText(where: QuestionTextWhereUniqueInput!, create: QuestionTextCreateInput!, update: QuestionTextUpdateInput!): QuestionText!
  upsertAlternativeText(where: AlternativeTextWhereUniqueInput!, create: AlternativeTextCreateInput!, update: AlternativeTextUpdateInput!): AlternativeText!
  upsertList(where: ListWhereUniqueInput!, create: ListCreateInput!, update: ListUpdateInput!): List!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  upsertAnswer(where: AnswerWhereUniqueInput!, create: AnswerCreateInput!, update: AnswerUpdateInput!): Answer!
  upsertQuestionType(where: QuestionTypeWhereUniqueInput!, create: QuestionTypeCreateInput!, update: QuestionTypeUpdateInput!): QuestionType!
  upsertLanguage(where: LanguageWhereUniqueInput!, create: LanguageCreateInput!, update: LanguageUpdateInput!): Language!
  upsertAlternatives(where: AlternativesWhereUniqueInput!, create: AlternativesCreateInput!, update: AlternativesUpdateInput!): Alternatives!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyQuestionnaires(data: QuestionnaireUpdateInput!, where: QuestionnaireWhereInput): BatchPayload!
  updateManyQuestionnairenames(data: QuestionnairenameUpdateInput!, where: QuestionnairenameWhereInput): BatchPayload!
  updateManyQuestionTexts(data: QuestionTextUpdateInput!, where: QuestionTextWhereInput): BatchPayload!
  updateManyAlternativeTexts(data: AlternativeTextUpdateInput!, where: AlternativeTextWhereInput): BatchPayload!
  updateManyLists(data: ListUpdateInput!, where: ListWhereInput): BatchPayload!
  updateManyQuestions(data: QuestionUpdateInput!, where: QuestionWhereInput): BatchPayload!
  updateManyAnswers(data: AnswerUpdateInput!, where: AnswerWhereInput): BatchPayload!
  updateManyQuestionTypes(data: QuestionTypeUpdateInput!, where: QuestionTypeWhereInput): BatchPayload!
  updateManyLanguages(data: LanguageUpdateInput!, where: LanguageWhereInput): BatchPayload!
  updateManyAlternativeses(data: AlternativesUpdateInput!, where: AlternativesWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyQuestionnaires(where: QuestionnaireWhereInput): BatchPayload!
  deleteManyQuestionnairenames(where: QuestionnairenameWhereInput): BatchPayload!
  deleteManyQuestionTexts(where: QuestionTextWhereInput): BatchPayload!
  deleteManyAlternativeTexts(where: AlternativeTextWhereInput): BatchPayload!
  deleteManyLists(where: ListWhereInput): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  deleteManyAnswers(where: AnswerWhereInput): BatchPayload!
  deleteManyQuestionTypes(where: QuestionTypeWhereInput): BatchPayload!
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!
  deleteManyAlternativeses(where: AlternativesWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  questionnaires(where: QuestionnaireWhereInput, orderBy: QuestionnaireOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Questionnaire]!
  questionnairenames(where: QuestionnairenameWhereInput, orderBy: QuestionnairenameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Questionnairename]!
  questionTexts(where: QuestionTextWhereInput, orderBy: QuestionTextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionText]!
  alternativeTexts(where: AlternativeTextWhereInput, orderBy: AlternativeTextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AlternativeText]!
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List]!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer]!
  questionTypes(where: QuestionTypeWhereInput, orderBy: QuestionTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionType]!
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  alternativeses(where: AlternativesWhereInput, orderBy: AlternativesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Alternatives]!
  user(where: UserWhereUniqueInput!): User
  questionnaire(where: QuestionnaireWhereUniqueInput!): Questionnaire
  questionnairename(where: QuestionnairenameWhereUniqueInput!): Questionnairename
  questionText(where: QuestionTextWhereUniqueInput!): QuestionText
  alternativeText(where: AlternativeTextWhereUniqueInput!): AlternativeText
  list(where: ListWhereUniqueInput!): List
  question(where: QuestionWhereUniqueInput!): Question
  answer(where: AnswerWhereUniqueInput!): Answer
  questionType(where: QuestionTypeWhereUniqueInput!): QuestionType
  language(where: LanguageWhereUniqueInput!): Language
  alternatives(where: AlternativesWhereUniqueInput!): Alternatives
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  questionnairesConnection(where: QuestionnaireWhereInput, orderBy: QuestionnaireOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionnaireConnection!
  questionnairenamesConnection(where: QuestionnairenameWhereInput, orderBy: QuestionnairenameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionnairenameConnection!
  questionTextsConnection(where: QuestionTextWhereInput, orderBy: QuestionTextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionTextConnection!
  alternativeTextsConnection(where: AlternativeTextWhereInput, orderBy: AlternativeTextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AlternativeTextConnection!
  listsConnection(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ListConnection!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  answersConnection(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerConnection!
  questionTypesConnection(where: QuestionTypeWhereInput, orderBy: QuestionTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionTypeConnection!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!
  alternativesesConnection(where: AlternativesWhereInput, orderBy: AlternativesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AlternativesConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Question implements Node {
  id: ID!
  number: Int!
  description: String!
  questionType(where: QuestionTypeWhereInput): QuestionType!
  questionText(where: QuestionTextWhereInput, orderBy: QuestionTextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionText!]
  list(where: ListWhereInput): List
  alternative(where: AlternativesWhereInput, orderBy: AlternativesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Alternatives!]
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  number: Int!
  description: String!
  questionType: QuestionTypeCreateOneInput!
  questionText: QuestionTextCreateManyWithoutQuestionInput
  list: ListCreateOneInput
  alternative: AlternativesCreateManyWithoutQuestionInput
}

input QuestionCreateManyInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateOneInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOneWithoutAlternativeInput {
  create: QuestionCreateWithoutAlternativeInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOneWithoutQuestionTextInput {
  create: QuestionCreateWithoutQuestionTextInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutAlternativeInput {
  number: Int!
  description: String!
  questionType: QuestionTypeCreateOneInput!
  questionText: QuestionTextCreateManyWithoutQuestionInput
  list: ListCreateOneInput
}

input QuestionCreateWithoutQuestionTextInput {
  number: Int!
  description: String!
  questionType: QuestionTypeCreateOneInput!
  list: ListCreateOneInput
  alternative: AlternativesCreateManyWithoutQuestionInput
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question!

  """A cursor for use in pagination."""
  cursor: String!
}

type Questionnaire implements Node {
  id: ID!
  numberID: Int!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  questionairename(where: QuestionnairenameWhereInput, orderBy: QuestionnairenameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Questionnairename!]
}

"""A connection to a list of items."""
type QuestionnaireConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionnaireEdge]!
  aggregate: AggregateQuestionnaire!
}

input QuestionnaireCreateInput {
  numberID: Int!
  questions: QuestionCreateManyInput
  questionairename: QuestionnairenameCreateManyWithoutQuestionaireInput
}

input QuestionnaireCreateOneWithoutQuestionairenameInput {
  create: QuestionnaireCreateWithoutQuestionairenameInput
  connect: QuestionnaireWhereUniqueInput
}

input QuestionnaireCreateWithoutQuestionairenameInput {
  numberID: Int!
  questions: QuestionCreateManyInput
}

"""An edge in a connection."""
type QuestionnaireEdge {
  """The item at the end of the edge."""
  node: Questionnaire!

  """A cursor for use in pagination."""
  cursor: String!
}

type Questionnairename implements Node {
  id: ID!
  text: String!
  language(where: LanguageWhereInput): Language!
  questionaire(where: QuestionnaireWhereInput): Questionnaire!
}

"""A connection to a list of items."""
type QuestionnairenameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionnairenameEdge]!
  aggregate: AggregateQuestionnairename!
}

input QuestionnairenameCreateInput {
  text: String!
  language: LanguageCreateOneInput!
  questionaire: QuestionnaireCreateOneWithoutQuestionairenameInput!
}

input QuestionnairenameCreateManyWithoutQuestionaireInput {
  create: [QuestionnairenameCreateWithoutQuestionaireInput!]
  connect: [QuestionnairenameWhereUniqueInput!]
}

input QuestionnairenameCreateWithoutQuestionaireInput {
  text: String!
  language: LanguageCreateOneInput!
}

"""An edge in a connection."""
type QuestionnairenameEdge {
  """The item at the end of the edge."""
  node: Questionnairename!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionnairenameOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionnairenamePreviousValues {
  id: ID!
  text: String!
}

type QuestionnairenameSubscriptionPayload {
  mutation: MutationType!
  node: Questionnairename
  updatedFields: [String!]
  previousValues: QuestionnairenamePreviousValues
}

input QuestionnairenameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionnairenameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionnairenameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionnairenameSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionnairenameWhereInput
}

input QuestionnairenameUpdateInput {
  text: String
  language: LanguageUpdateOneInput
  questionaire: QuestionnaireUpdateOneWithoutQuestionairenameInput
}

input QuestionnairenameUpdateManyWithoutQuestionaireInput {
  create: [QuestionnairenameCreateWithoutQuestionaireInput!]
  connect: [QuestionnairenameWhereUniqueInput!]
  disconnect: [QuestionnairenameWhereUniqueInput!]
  delete: [QuestionnairenameWhereUniqueInput!]
  update: [QuestionnairenameUpdateWithWhereUniqueWithoutQuestionaireInput!]
  upsert: [QuestionnairenameUpsertWithWhereUniqueWithoutQuestionaireInput!]
}

input QuestionnairenameUpdateWithoutQuestionaireDataInput {
  text: String
  language: LanguageUpdateOneInput
}

input QuestionnairenameUpdateWithWhereUniqueWithoutQuestionaireInput {
  where: QuestionnairenameWhereUniqueInput!
  data: QuestionnairenameUpdateWithoutQuestionaireDataInput!
}

input QuestionnairenameUpsertWithWhereUniqueWithoutQuestionaireInput {
  where: QuestionnairenameWhereUniqueInput!
  update: QuestionnairenameUpdateWithoutQuestionaireDataInput!
  create: QuestionnairenameCreateWithoutQuestionaireInput!
}

input QuestionnairenameWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionnairenameWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionnairenameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionnairenameWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  language: LanguageWhereInput
  questionaire: QuestionnaireWhereInput
}

input QuestionnairenameWhereUniqueInput {
  id: ID
}

enum QuestionnaireOrderByInput {
  id_ASC
  id_DESC
  numberID_ASC
  numberID_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionnairePreviousValues {
  id: ID!
  numberID: Int!
}

type QuestionnaireSubscriptionPayload {
  mutation: MutationType!
  node: Questionnaire
  updatedFields: [String!]
  previousValues: QuestionnairePreviousValues
}

input QuestionnaireSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionnaireSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionnaireSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionnaireSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionnaireWhereInput
}

input QuestionnaireUpdateInput {
  numberID: Int
  questions: QuestionUpdateManyInput
  questionairename: QuestionnairenameUpdateManyWithoutQuestionaireInput
}

input QuestionnaireUpdateOneWithoutQuestionairenameInput {
  create: QuestionnaireCreateWithoutQuestionairenameInput
  connect: QuestionnaireWhereUniqueInput
  delete: Boolean
  update: QuestionnaireUpdateWithoutQuestionairenameDataInput
  upsert: QuestionnaireUpsertWithoutQuestionairenameInput
}

input QuestionnaireUpdateWithoutQuestionairenameDataInput {
  numberID: Int
  questions: QuestionUpdateManyInput
}

input QuestionnaireUpsertWithoutQuestionairenameInput {
  update: QuestionnaireUpdateWithoutQuestionairenameDataInput!
  create: QuestionnaireCreateWithoutQuestionairenameInput!
}

input QuestionnaireWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionnaireWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionnaireWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionnaireWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  numberID: Int

  """All values that are not equal to given value."""
  numberID_not: Int

  """All values that are contained in given list."""
  numberID_in: [Int!]

  """All values that are not contained in given list."""
  numberID_not_in: [Int!]

  """All values less than the given value."""
  numberID_lt: Int

  """All values less than or equal the given value."""
  numberID_lte: Int

  """All values greater than the given value."""
  numberID_gt: Int

  """All values greater than or equal the given value."""
  numberID_gte: Int
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  questionairename_every: QuestionnairenameWhereInput
  questionairename_some: QuestionnairenameWhereInput
  questionairename_none: QuestionnairenameWhereInput
}

input QuestionnaireWhereUniqueInput {
  id: ID
  numberID: Int
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionPreviousValues {
  id: ID!
  number: Int!
  description: String!
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

type QuestionText implements Node {
  id: ID!
  text: String!
  language(where: LanguageWhereInput): Language!
  question(where: QuestionWhereInput): Question!
}

"""A connection to a list of items."""
type QuestionTextConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionTextEdge]!
  aggregate: AggregateQuestionText!
}

input QuestionTextCreateInput {
  text: String!
  language: LanguageCreateOneInput!
  question: QuestionCreateOneWithoutQuestionTextInput!
}

input QuestionTextCreateManyWithoutQuestionInput {
  create: [QuestionTextCreateWithoutQuestionInput!]
  connect: [QuestionTextWhereUniqueInput!]
}

input QuestionTextCreateWithoutQuestionInput {
  text: String!
  language: LanguageCreateOneInput!
}

"""An edge in a connection."""
type QuestionTextEdge {
  """The item at the end of the edge."""
  node: QuestionText!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionTextOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionTextPreviousValues {
  id: ID!
  text: String!
}

type QuestionTextSubscriptionPayload {
  mutation: MutationType!
  node: QuestionText
  updatedFields: [String!]
  previousValues: QuestionTextPreviousValues
}

input QuestionTextSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionTextSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionTextSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionTextSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionTextWhereInput
}

input QuestionTextUpdateInput {
  text: String
  language: LanguageUpdateOneInput
  question: QuestionUpdateOneWithoutQuestionTextInput
}

input QuestionTextUpdateManyWithoutQuestionInput {
  create: [QuestionTextCreateWithoutQuestionInput!]
  connect: [QuestionTextWhereUniqueInput!]
  disconnect: [QuestionTextWhereUniqueInput!]
  delete: [QuestionTextWhereUniqueInput!]
  update: [QuestionTextUpdateWithWhereUniqueWithoutQuestionInput!]
  upsert: [QuestionTextUpsertWithWhereUniqueWithoutQuestionInput!]
}

input QuestionTextUpdateWithoutQuestionDataInput {
  text: String
  language: LanguageUpdateOneInput
}

input QuestionTextUpdateWithWhereUniqueWithoutQuestionInput {
  where: QuestionTextWhereUniqueInput!
  data: QuestionTextUpdateWithoutQuestionDataInput!
}

input QuestionTextUpsertWithWhereUniqueWithoutQuestionInput {
  where: QuestionTextWhereUniqueInput!
  update: QuestionTextUpdateWithoutQuestionDataInput!
  create: QuestionTextCreateWithoutQuestionInput!
}

input QuestionTextWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionTextWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionTextWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionTextWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  language: LanguageWhereInput
  question: QuestionWhereInput
}

input QuestionTextWhereUniqueInput {
  id: ID
}

type QuestionType implements Node {
  id: ID!
  type: String!
}

"""A connection to a list of items."""
type QuestionTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionTypeEdge]!
  aggregate: AggregateQuestionType!
}

input QuestionTypeCreateInput {
  type: String!
}

input QuestionTypeCreateOneInput {
  create: QuestionTypeCreateInput
  connect: QuestionTypeWhereUniqueInput
}

"""An edge in a connection."""
type QuestionTypeEdge {
  """The item at the end of the edge."""
  node: QuestionType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionTypeOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionTypePreviousValues {
  id: ID!
  type: String!
}

type QuestionTypeSubscriptionPayload {
  mutation: MutationType!
  node: QuestionType
  updatedFields: [String!]
  previousValues: QuestionTypePreviousValues
}

input QuestionTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionTypeWhereInput
}

input QuestionTypeUpdateDataInput {
  type: String
}

input QuestionTypeUpdateInput {
  type: String
}

input QuestionTypeUpdateOneInput {
  create: QuestionTypeCreateInput
  connect: QuestionTypeWhereUniqueInput
  delete: Boolean
  update: QuestionTypeUpdateDataInput
  upsert: QuestionTypeUpsertNestedInput
}

input QuestionTypeUpsertNestedInput {
  update: QuestionTypeUpdateDataInput!
  create: QuestionTypeCreateInput!
}

input QuestionTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
}

input QuestionTypeWhereUniqueInput {
  id: ID
  type: String
}

input QuestionUpdateDataInput {
  number: Int
  description: String
  questionType: QuestionTypeUpdateOneInput
  questionText: QuestionTextUpdateManyWithoutQuestionInput
  list: ListUpdateOneInput
  alternative: AlternativesUpdateManyWithoutQuestionInput
}

input QuestionUpdateInput {
  number: Int
  description: String
  questionType: QuestionTypeUpdateOneInput
  questionText: QuestionTextUpdateManyWithoutQuestionInput
  list: ListUpdateOneInput
  alternative: AlternativesUpdateManyWithoutQuestionInput
}

input QuestionUpdateManyInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueNestedInput!]
  upsert: [QuestionUpsertWithWhereUniqueNestedInput!]
}

input QuestionUpdateOneInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
  delete: Boolean
  update: QuestionUpdateDataInput
  upsert: QuestionUpsertNestedInput
}

input QuestionUpdateOneWithoutAlternativeInput {
  create: QuestionCreateWithoutAlternativeInput
  connect: QuestionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: QuestionUpdateWithoutAlternativeDataInput
  upsert: QuestionUpsertWithoutAlternativeInput
}

input QuestionUpdateOneWithoutQuestionTextInput {
  create: QuestionCreateWithoutQuestionTextInput
  connect: QuestionWhereUniqueInput
  delete: Boolean
  update: QuestionUpdateWithoutQuestionTextDataInput
  upsert: QuestionUpsertWithoutQuestionTextInput
}

input QuestionUpdateWithoutAlternativeDataInput {
  number: Int
  description: String
  questionType: QuestionTypeUpdateOneInput
  questionText: QuestionTextUpdateManyWithoutQuestionInput
  list: ListUpdateOneInput
}

input QuestionUpdateWithoutQuestionTextDataInput {
  number: Int
  description: String
  questionType: QuestionTypeUpdateOneInput
  list: ListUpdateOneInput
  alternative: AlternativesUpdateManyWithoutQuestionInput
}

input QuestionUpdateWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateDataInput!
}

input QuestionUpsertNestedInput {
  update: QuestionUpdateDataInput!
  create: QuestionCreateInput!
}

input QuestionUpsertWithoutAlternativeInput {
  update: QuestionUpdateWithoutAlternativeDataInput!
  create: QuestionCreateWithoutAlternativeInput!
}

input QuestionUpsertWithoutQuestionTextInput {
  update: QuestionUpdateWithoutQuestionTextDataInput!
  create: QuestionCreateWithoutQuestionTextInput!
}

input QuestionUpsertWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateDataInput!
  create: QuestionCreateInput!
}

input QuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  questionType: QuestionTypeWhereInput
  questionText_every: QuestionTextWhereInput
  questionText_some: QuestionTextWhereInput
  questionText_none: QuestionTextWhereInput
  list: ListWhereInput
  alternative_every: AlternativesWhereInput
  alternative_some: AlternativesWhereInput
  alternative_none: AlternativesWhereInput
}

input QuestionWhereUniqueInput {
  id: ID
  number: Int
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  questionnaire(where: QuestionnaireSubscriptionWhereInput): QuestionnaireSubscriptionPayload
  questionnairename(where: QuestionnairenameSubscriptionWhereInput): QuestionnairenameSubscriptionPayload
  questionText(where: QuestionTextSubscriptionWhereInput): QuestionTextSubscriptionPayload
  alternativeText(where: AlternativeTextSubscriptionWhereInput): AlternativeTextSubscriptionPayload
  list(where: ListSubscriptionWhereInput): ListSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  answer(where: AnswerSubscriptionWhereInput): AnswerSubscriptionPayload
  questionType(where: QuestionTypeSubscriptionWhereInput): QuestionTypeSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
  alternatives(where: AlternativesSubscriptionWhereInput): AlternativesSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  answers: AnswerCreateManyInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  answers: AnswerUpdateManyInput
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  answers_every: AnswerWhereInput
  answers_some: AnswerWhereInput
  answers_none: AnswerWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
